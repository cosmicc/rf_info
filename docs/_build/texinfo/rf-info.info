This is rf-info.info, produced by makeinfo version 6.5 from
rf-info.texi.

     rf-info 0.6.3, Jan 18, 2020

     Ian Perry

     Copyright © 2020, Ian Perry

INFO-DIR-SECTION Miscellaneous
START-INFO-DIR-ENTRY
* rf-info: (rf-info.info). Obtain detailed information about a specific radio
                        frequency
END-INFO-DIR-ENTRY


   Generated by Sphinx 2.3.1.


File: rf-info.info,  Node: Top,  Next: rf-info,  Up: (dir)

rf-info Documentation
*********************

     rf-info 0.6.3, Jan 18, 2020

     Ian Perry

     Copyright © 2020, Ian Perry

* Menu:

* rf-info::
* Installation::
* Usage: Usage<2>.
* rf-info: rf-info<2>.
* Contributing::
* Credits: Credits<2>.
* History::
* Indices and tables::
* Python Module Index::
* Index::

 — The Detailed Node Listing —

rf-info

* Features::
* Install::
* Usage::
* Todo::
* Credits::

Installation

* Requirements::
* Stable release::
* From sources::

Usage

* Python::
* Command Line::

rf-info

* rf-info package::

rf-info package

* Submodules::
* rf_info.rf_info module: rf_info rf_info module.
* Module contents::

Contributing

* Types of Contributions::
* Get Started!::
* Pull Request Guidelines::
* Tips::
* Deploying::

Types of Contributions

* Report Bugs::
* Fix Bugs::
* Implement Features::
* Write Documentation::
* Submit Feedback::

Credits

* Development Lead::
* Contributors::

History

* 0.1.0 (2020-01-12): 0 1 0 2020-01-12.



File: rf-info.info,  Node: rf-info,  Next: Installation,  Prev: Top,  Up: Top

1 rf-info
*********

[rf-info-figures//opt/rf_info/docs/_build/doctrees/images/e99e0bae31486bda499fe1e1e213c153dfd12712/rf_info]
[rf-info-figures//opt/rf_info/docs/_build/doctrees/images/31c6a4bee8b6bd814862adf5140fb632cf5a77e3/rf_info]
[rf-info-figures//opt/rf_info/docs/_build/doctrees/images/72184e53e8f574e967626bb9c297cfbd57f9c423/rf_info]
[rf-info-figures//opt/rf_info/docs/_build/doctrees/images/6720fc0c6d285c4acc4930f36ec34bfe7b9f3d4b/badge]
[rf-info-figures//opt/rf_info/docs/_build/doctrees/images/f8b1d7dcd180c1cd81bac45dfa74790ba8c8e87d/rf_info]
[rf-info-figures//opt/rf_info/docs/_build/doctrees/images/c6cb54b3ce92bb19aa3fe6e81c091369a0f776d9/3b6069fc5fd5044662f697e5d0aaba1a888dac2a]
[Documentation Status]
Command line & Python library for obtaining details about a radio
frequency

   * Free software: MIT license

   * Documentation: ‘https://rf-info.readthedocs.io’.

   * Python 3.6, 3.7, 3.8 & pypy3 tested

   * Linux & Windows with color terminal support

* Menu:

* Features::
* Install::
* Usage::
* Todo::
* Credits::


File: rf-info.info,  Node: Features,  Next: Install,  Up: rf-info

1.1 Features
============

Returns information about a radio frequency (Country Specific)

   - “Radio Display” format (Dotted notaton)

   - hz, khz, Mhz and Ghz representations of the frequency

   - Frequency Wavelength

   - ITU Band Description

   - ITU Band Abbreviation

   - ITU Band Number

   - IEEE Band Name

   - NATO Band Name

   - Waveguide Band Name

   - Fixed Station & Mobile Station Designations

   - Broadcast Information

   - Primary Band Allocations

   - Secondary Band Allocations

   - Detailed footnotes for each band allocation

   - Amateur Radio Details (Usage, License Class, Max Power) * Not yet
     complete

Currently supported band allocations for countries: United States (US),
Canada (CA), Brazil (BR), Spain (ES), United Kingdom (GB), Russian
Federation (RU), Ukraine (UA), Japan (JP), India (IN), Korea, Republic
of (KR), Thailand (TH), Switzerland (CH), Chile (CL), Denmark (DK),
Finland (FI), France (FR), Hungary (HU), Indonesia (ID), Iceland (IS),
Italy (IT), Mexico (MX), Netherlands (NL), New Zealand (NZ), Norway
(NO), Poland (PL), South Africa (ZA), Sweden (SE), Venezuela (VE),
Australia (AU), Slovenia (SI), Ireland (IE), Belgium (BE), Austria (AT),
Argentina (AR), Israel (IL), Romania (RO), China (CN), Uruguay (UY),
Greece (GR), Panama (PA), Peru (PE)

I can easily add support for more countries upon request

Command line supports color, raw parsable, and json output


File: rf-info.info,  Node: Install,  Next: Usage,  Prev: Features,  Up: rf-info

1.2 Install
===========

Python library Requires:

Command Line Requires:

Install:


File: rf-info.info,  Node: Usage,  Next: Todo,  Prev: Install,  Up: rf-info

1.3 Usage
=========

Command Line:

Frequency format examples:

Also supports “Radio Display” frequency representation (Dotted
notation):

Suffix examples hz, khz, Mhz, Ghz (Case Insensitive):

Country examples (2 digit abbriviation, 3 digit abbriviation, 3 digit
number, or full name) US, USA, 040, JPN, es, Spain (Case Insensitive):

Python:

Returns a dictionary:

Or you can get individual items directly:

Also supports adding and subtracting frequencies.  Either a frequency
object, int, or string representation of a frequency, returns a new
frequency object:

Example command line output:


File: rf-info.info,  Node: Todo,  Next: Credits,  Prev: Usage,  Up: rf-info

1.4 Todo
========

   - More WIFI band details (channels)

   - More Cellular band details (channels)

   - More Sattelite band details


File: rf-info.info,  Node: Credits,  Prev: Todo,  Up: rf-info

1.5 Credits
===========

M. Ian Perry (<ianperry99@gmail.com>) AD8DL


File: rf-info.info,  Node: Installation,  Next: Usage<2>,  Prev: rf-info,  Up: Top

2 Installation
**************

* Menu:

* Requirements::
* Stable release::
* From sources::


File: rf-info.info,  Node: Requirements,  Next: Stable release,  Up: Installation

2.1 Requirements
================

rf-info requires the iso3166 library

     $ pip install iso3166

rf-info command line also requires the colorama library for color
terminal output

     $ pip install colorama


File: rf-info.info,  Node: Stable release,  Next: From sources,  Prev: Requirements,  Up: Installation

2.2 Stable release
==================

To install rf-info, run this command in your terminal:

     $ pip install rf-info

This is the preferred method to install rf-info, as it will always
install the most recent stable release.

If you don’t have pip(1) installed, this Python installation guide(2)
can guide you through the process.

   ---------- Footnotes ----------

   (1) https://pip.pypa.io/en/stable/

   (2) https://docs.python-guide.org/starting/installation/


File: rf-info.info,  Node: From sources,  Prev: Stable release,  Up: Installation

2.3 From sources
================

The sources for rf-info can be downloaded from the Github repo(1).

You can either clone the public repository:

     $ git clone git://github.com/cosmicc/rf_info

Or download the tarball(2):

     $ curl -OJL https://github.com/cosmicc/rf_info/tarball/master

Once you have a copy of the source, you can install it with:

     $ python setup.py install

   ---------- Footnotes ----------

   (1) https://github.com/cosmicc/rf_info

   (2) https://github.com/cosmicc/rf_info/tarball/master


File: rf-info.info,  Node: Usage<2>,  Next: rf-info<2>,  Prev: Installation,  Up: Top

3 Usage
*******

* Menu:

* Python::
* Command Line::


File: rf-info.info,  Node: Python,  Next: Command Line,  Up: Usage<2>

3.1 Python
==========

To use rf-info in a python project:

     >>> from rf_info import Frequency
     >>> freq = Frequency('112.434.000')

then::

          >>> freq.details()

Returns a dictionary of all details::

          >>> {'display': '144.100.000', 'hz': 144100000, 'khz': 144100.0, 'mhz': 144.1, 'ghz': 0.1441, 'wavelength': '2m', 'itu_band': 'Very High Frequency', 'itu_abbr': 'VHF', 'itu_num': 8, 'ieee_band': 'VHF', 'ieee_description': 'Very High Frequency', 'nato_band': 'A', 'waveguide_band': None, 'country_abbr': 'US', 'country_name': 'United States of America', 'amateur': True, 'fixed_station': False, 'mobile_station': False, 'broadcast': False, 'primary_allocation': ['Amateur', 'Amateur-Satellite'], 'secondary_allocation': [], 'allocation_notes': ['[5.216]: Additional allocation: in China, the band 144-146 MHz is also allocated to the aeronautical mobile (OR) service on a secondary basis.']}

You can also get each detail individually:

     >>> freq.itu_band
     >>> freq.wavelength
     >>> freq.Primary_Allocation

Also supports adding and subtracting frequencies.  Start with a
frequency object then annd or subtract another frequency object, int, or
string representation of a frequency, returns a new frequency object:

     >>> new_freq_object = Frequency('001.123.000') + Frequency('7', 'khz')  # Adds 7 khz to 1.123 mhz
     >>> new_freq_object = Frequency('1', 'mhz') + 15000  # Adds 15 khz to 1 mhz
     >>> new_freq_object = Frequency('123,000') - '000.007.000'  # Subtracts 7 khz from 123 khz


File: rf-info.info,  Node: Command Line,  Prev: Python,  Up: Usage<2>

3.2 Command Line
================

To use the rf-info command line tool:

     $ rf-info <frequency> [<units>] [<country>]

Frequency format examples:

     $ rf-info 89910000
     $ rf-info 23,450,000
     $ rf-info 12,634.534
     $ rf-info 12_000_000
     $ rf-info 344_500.100

Also supports "Radio Display" frequency representation (Dotted
notation):

     $ rf-info 124.125.000
     $ rf-info 1.500.125.000
     $ rf-info 000.012.500

Suffix examples: hz, khz, Mhz, Ghz (Case Insensitive):

     $ rf-info 123.100 mhz
     $ rf-info 4.5 ghz

Country examples (2 digit abbriviation, 3 digit abbriviation, 3 digit
number, or full name): US, USA, 040, JPN, es, Spain (Case Insensitive):

     $ rf-info 144.400.000 hz US
     $ rf-info 88 mhz JPN

Example command line output:

     $ rf-info 144.100.000 hz US
     Display: 144.100.000
     Hz: 144100000
     Khz: 144100.0
     Mhz: 144.1
     Ghz: 0.1441
     Wavelength: 2m
     Itu_Band: Very High Frequency
     Itu_Abbr: VHF
     Itu_Num: 8
     Ieee_Band: VHF
     Ieee_Description: Very High Frequency
     Nato_Band: A
     Country_Abbr: US
     Country_Name: United States of America
     Fixed_Station: False
     Mobile_Station: False
     Broadcasting: False
     Amateur: True
     Amateur_Details:
         General CW and weak signals
         License Class
     Max Power
     Primary_Allocation:
         Amateur
         Amateur-Satellite
     Allocation_Notes:
         [5.216]: Additional allocation: in China, the band 144-146 MHz is also allocated to the aeronautical mobile (OR) service on a

You also can print the info in raw or json formatted output:

     $ rf-info 144.000 hz --raw
     $ rf-info 144.000 hz --json


File: rf-info.info,  Node: rf-info<2>,  Next: Contributing,  Prev: Usage<2>,  Up: Top

4 rf-info
*********

* Menu:

* rf-info package::


File: rf-info.info,  Node: rf-info package,  Up: rf-info<2>

4.1 rf-info package
===================

* Menu:

* Submodules::
* rf_info.rf_info module: rf_info rf_info module.
* Module contents::


File: rf-info.info,  Node: Submodules,  Next: rf_info rf_info module,  Up: rf-info package

4.1.1 Submodules
----------------


File: rf-info.info,  Node: rf_info rf_info module,  Next: Module contents,  Prev: Submodules,  Up: rf-info package

4.1.2 rf_info.rf_info module
----------------------------

 -- Class: rf_info.rf_info.Frequency (freq, unit='hz', country='us')

     Bases: ‘object’

      -- Method: details ()

      -- Method: info ()

 -- Function: rf_info.rf_info.parse_freq (freq, unit)

 -- Function: rf_info.rf_info.remove_all_butfirst (s, substr)


File: rf-info.info,  Node: Module contents,  Prev: rf_info rf_info module,  Up: rf-info package

4.1.3 Module contents
---------------------


File: rf-info.info,  Node: Contributing,  Next: Credits<2>,  Prev: rf-info<2>,  Up: Top

5 Contributing
**************

Contributions are welcome, and they are greatly appreciated!  Every
little bit helps, and credit will always be given.

You can contribute in many ways:

* Menu:

* Types of Contributions::
* Get Started!::
* Pull Request Guidelines::
* Tips::
* Deploying::


File: rf-info.info,  Node: Types of Contributions,  Next: Get Started!,  Up: Contributing

5.1 Types of Contributions
==========================

* Menu:

* Report Bugs::
* Fix Bugs::
* Implement Features::
* Write Documentation::
* Submit Feedback::


File: rf-info.info,  Node: Report Bugs,  Next: Fix Bugs,  Up: Types of Contributions

5.1.1 Report Bugs
-----------------

Report bugs at ‘https://github.com/cosmicc/rf_info/issues’.

If you are reporting a bug, please include:

   * Your operating system name and version.

   * Any details about your local setup that might be helpful in
     troubleshooting.

   * Detailed steps to reproduce the bug.


File: rf-info.info,  Node: Fix Bugs,  Next: Implement Features,  Prev: Report Bugs,  Up: Types of Contributions

5.1.2 Fix Bugs
--------------

Look through the GitHub issues for bugs.  Anything tagged with "bug" and
"help wanted" is open to whoever wants to implement it.


File: rf-info.info,  Node: Implement Features,  Next: Write Documentation,  Prev: Fix Bugs,  Up: Types of Contributions

5.1.3 Implement Features
------------------------

Look through the GitHub issues for features.  Anything tagged with
"enhancement" and "help wanted" is open to whoever wants to implement
it.


File: rf-info.info,  Node: Write Documentation,  Next: Submit Feedback,  Prev: Implement Features,  Up: Types of Contributions

5.1.4 Write Documentation
-------------------------

rf-info could always use more documentation, whether as part of the
official rf-info docs, in docstrings, or even on the web in blog posts,
articles, and such.


File: rf-info.info,  Node: Submit Feedback,  Prev: Write Documentation,  Up: Types of Contributions

5.1.5 Submit Feedback
---------------------

The best way to send feedback is to file an issue at
‘https://github.com/cosmicc/rf_info/issues’.

If you are proposing a feature:

   * Explain in detail how it would work.

   * Keep the scope as narrow as possible, to make it easier to
     implement.

   * Remember that this is a volunteer-driven project, and that
     contributions are welcome :)


File: rf-info.info,  Node: Get Started!,  Next: Pull Request Guidelines,  Prev: Types of Contributions,  Up: Contributing

5.2 Get Started!
================

Ready to contribute?  Here’s how to set up ‘rf_info’ for local
development.

  1. Fork the ‘rf_info’ repo on GitHub.

  2. Clone your fork locally:

          $ git clone git@github.com:your_name_here/rf_info.git

  3. Install your local copy into a virtualenv.  Assuming you have
     virtualenvwrapper installed, this is how you set up your fork for
     local development:

          $ mkvirtualenv rf_info
          $ cd rf_info/
          $ python setup.py develop

  4. Create a branch for local development:

          $ git checkout -b name-of-your-bugfix-or-feature

     Now you can make your changes locally.

  5. When you’re done making changes, check that your changes pass
     flake8 and the tests, including testing other Python versions with
     tox:

          $ flake8 rf_info tests
          $ python setup.py test or pytest
          $ tox

     To get flake8 and tox, just pip install them into your virtualenv.

  6. Commit your changes and push your branch to GitHub:

          $ git add .
          $ git commit -m "Your detailed description of your changes."
          $ git push origin name-of-your-bugfix-or-feature

  7. Submit a pull request through the GitHub website.


File: rf-info.info,  Node: Pull Request Guidelines,  Next: Tips,  Prev: Get Started!,  Up: Contributing

5.3 Pull Request Guidelines
===========================

Before you submit a pull request, check that it meets these guidelines:

  1. The pull request should include tests.

  2. If the pull request adds functionality, the docs should be updated.
     Put your new functionality into a function with a docstring, and
     add the feature to the list in README.rst.

  3. The pull request should work for Python 3.5, 3.6, 3.7 and 3.8, and
     for PyPy.  Check
     ‘https://travis-ci.org/cosmicc/rf_info/pull_requests’ and make sure
     that the tests pass for all supported Python versions.


File: rf-info.info,  Node: Tips,  Next: Deploying,  Prev: Pull Request Guidelines,  Up: Contributing

5.4 Tips
========

To run a subset of tests:

     $ pytest tests.test_rf_info


File: rf-info.info,  Node: Deploying,  Prev: Tips,  Up: Contributing

5.5 Deploying
=============

A reminder for the maintainers on how to deploy.  Make sure all your
changes are committed (including an entry in HISTORY.rst).  Then run:

     $ bump2version patch # possible: major / minor / patch
     $ git push
     $ git push --tags

Travis will then deploy to PyPI if tests pass.


File: rf-info.info,  Node: Credits<2>,  Next: History,  Prev: Contributing,  Up: Top

6 Credits
*********

* Menu:

* Development Lead::
* Contributors::


File: rf-info.info,  Node: Development Lead,  Next: Contributors,  Up: Credits<2>

6.1 Development Lead
====================

   * Ian Perry <<ianperry99@gmail.com>>


File: rf-info.info,  Node: Contributors,  Prev: Development Lead,  Up: Credits<2>

6.2 Contributors
================

None yet.  Why not be the first?


File: rf-info.info,  Node: History,  Next: Indices and tables,  Prev: Credits<2>,  Up: Top

7 History
*********

* Menu:

* 0.1.0 (2020-01-12): 0 1 0 2020-01-12.


File: rf-info.info,  Node: 0 1 0 2020-01-12,  Up: History

7.1 0.1.0 (2020-01-12)
======================

   * First release on PyPI.


File: rf-info.info,  Node: Indices and tables,  Next: Python Module Index,  Prev: History,  Up: Top

Indices and tables
******************

   * genindex

   * modindex

   * search


File: rf-info.info,  Node: Python Module Index,  Next: Index,  Prev: Indices and tables,  Up: Top

Python Module Index
*******************

* Menu:

* rf_info: 0.
* rf_info.rf_info: 1.


File: rf-info.info,  Node: Index,  Prev: Python Module Index,  Up: Top

Index
*****

 [index ]
* Menu:

* details() (rf_info.rf_info.Frequency method): rf_info rf_info module.
                                                               (line 10)
* Frequency (class in rf_info.rf_info):  rf_info rf_info module.
                                                               (line  6)
* info() (rf_info.rf_info.Frequency method): rf_info rf_info module.
                                                               (line 12)
* parse_freq() (in module rf_info.rf_info): rf_info rf_info module.
                                                               (line 14)
* remove_all_butfirst() (in module rf_info.rf_info): rf_info rf_info module.
                                                               (line 16)
* rf_info (module):                      Module contents.      (line  5)
* rf_info.rf_info (module):              rf_info rf_info module.
                                                               (line  6)



Tag Table:
Node: Top376
Ref: index doc568
Ref: 2568
Node: rf-info1427
Ref: readme doc1508
Ref: 31508
Ref: readme rf-info1508
Ref: 41508
Ref: readme welcome-to-rf-info-s-documentation1508
Ref: 51508
Node: Features2558
Ref: readme features2627
Ref: 62627
Node: Install4059
Ref: readme install4142
Ref: 74142
Node: Usage4227
Ref: readme usage4306
Ref: 84306
Node: Todo4908
Ref: readme todo4987
Ref: 94987
Node: Credits5124
Ref: readme credits5189
Ref: a5189
Node: Installation5259
Ref: installation doc5345
Ref: b5345
Ref: installation installation5345
Ref: c5345
Node: Requirements5439
Ref: installation requirements5524
Ref: d5524
Node: Stable release5737
Ref: installation stable-release5843
Ref: e5843
Ref: Stable release-Footnote-16218
Ref: Stable release-Footnote-26257
Node: From sources6318
Ref: installation from-sources6403
Ref: f6403
Ref: installation python-installation-guide6403
Ref: 106403
Ref: From sources-Footnote-16829
Ref: From sources-Footnote-26872
Node: Usage<2>6930
Ref: usage doc7019
Ref: 117019
Ref: usage tarball7019
Ref: 127019
Ref: usage usage7019
Ref: 137019
Node: Python7074
Ref: usage python7147
Ref: 147147
Node: Command Line8682
Ref: usage command-line8755
Ref: 158755
Node: rf-info<2>10453
Ref: modules doc10542
Ref: 1610542
Ref: modules rf-info10542
Ref: 1710542
Node: rf-info package10593
Ref: rf_info doc10656
Ref: 1810656
Ref: rf_info rf-info-package10656
Ref: 1910656
Node: Submodules10792
Ref: rf_info submodules10886
Ref: 1a10886
Node: rf_info rf_info module10921
Ref: rf_info module-rf_info rf_info11039
Ref: 111039
Ref: rf_info rf-info-rf-info-module11039
Ref: 1b11039
Ref: rf_info rf_info rf_info Frequency11098
Ref: 1c11098
Ref: rf_info rf_info rf_info Frequency details11194
Ref: 1d11194
Ref: rf_info rf_info rf_info Frequency info11223
Ref: 1e11223
Ref: rf_info rf_info rf_info parse_freq11249
Ref: 1f11249
Ref: rf_info rf_info rf_info remove_all_butfirst11304
Ref: 2011304
Node: Module contents11367
Ref: rf_info module-contents11466
Ref: 2111466
Ref: rf_info module-rf_info11466
Ref: 011466
Node: Contributing11511
Ref: contributing doc11602
Ref: 2211602
Ref: contributing contributing11602
Ref: 2311602
Node: Types of Contributions11892
Ref: contributing types-of-contributions11985
Ref: 2411985
Node: Report Bugs12146
Ref: contributing report-bugs12234
Ref: 2512234
Node: Fix Bugs12558
Ref: contributing fix-bugs12673
Ref: 2612673
Node: Implement Features12834
Ref: contributing implement-features12957
Ref: 2712957
Node: Write Documentation13150
Ref: contributing write-documentation13280
Ref: 2813280
Node: Submit Feedback13494
Ref: contributing submit-feedback13597
Ref: 2913597
Node: Get Started!14001
Ref: contributing get-started14126
Ref: 2a14126
Node: Pull Request Guidelines15377
Ref: contributing pull-request-guidelines15484
Ref: 2b15484
Node: Tips16083
Ref: contributing tips16187
Ref: 2c16187
Node: Deploying16267
Ref: contributing deploying16339
Ref: 2d16339
Node: Credits<2>16656
Ref: authors doc16744
Ref: 2e16744
Ref: authors credits16744
Ref: 2f16744
Node: Development Lead16813
Ref: authors development-lead16898
Ref: 3016898
Node: Contributors16982
Ref: authors contributors17067
Ref: 3117067
Node: History17136
Ref: history doc17230
Ref: 3217230
Ref: history history17230
Ref: 3317230
Node: 0 1 0 2020-01-1217301
Ref: history id117362
Ref: 3417362
Node: Indices and tables17438
Ref: index indices-and-tables17541
Ref: 3517541
Node: Python Module Index17623
Node: Index17811

End Tag Table


Local Variables:
coding: utf-8
End:
