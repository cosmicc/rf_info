\input texinfo   @c -*-texinfo-*-
@c %**start of header
@setfilename rf-info.info
@documentencoding UTF-8
@ifinfo
@*Generated by Sphinx 2.3.1.@*
@end ifinfo
@settitle rf-info Documentation
@defindex ge
@paragraphindent 0
@exampleindent 4
@finalout
@dircategory Miscellaneous
@direntry
* rf-info: (rf-info.info). Obtain detailed information about a specific radio
                        frequency
@end direntry

@definfoenclose strong,`,'
@definfoenclose emph,`,'
@c %**end of header

@copying
@quotation
rf-info 0.6.3, Jan 18, 2020

Ian Perry

Copyright @copyright{} 2020, Ian Perry
@end quotation

@end copying

@titlepage
@title rf-info Documentation
@insertcopying
@end titlepage
@contents

@c %** start of user preamble

@c %** end of user preamble

@ifnottex
@node Top
@top rf-info Documentation
@insertcopying
@end ifnottex

@c %**start of body
@anchor{index doc}@anchor{2}
@menu
* rf-info:: 
* Installation:: 
* Usage: Usage<2>. 
* rf-info: rf-info<2>. 
* Contributing:: 
* Credits: Credits<2>. 
* History:: 
* Indices and tables:: 
* Python Module Index:: 
* Index:: 

@detailmenu
 --- The Detailed Node Listing ---

rf-info

* Features:: 
* Install:: 
* Usage:: 
* Todo:: 
* Credits:: 

Installation

* Requirements:: 
* Stable release:: 
* From sources:: 

Usage

* Python:: 
* Command Line:: 

rf-info

* rf-info package:: 

rf-info package

* Submodules:: 
* rf_info.rf_info module: rf_info rf_info module. 
* Module contents:: 

Contributing

* Types of Contributions:: 
* Get Started!:: 
* Pull Request Guidelines:: 
* Tips:: 
* Deploying:: 

Types of Contributions

* Report Bugs:: 
* Fix Bugs:: 
* Implement Features:: 
* Write Documentation:: 
* Submit Feedback:: 

Credits

* Development Lead:: 
* Contributors:: 

History

* 0.1.0 (2020-01-12): 0 1 0 2020-01-12. 

@end detailmenu
@end menu

@node rf-info,Installation,Top,Top
@anchor{readme doc}@anchor{3}@anchor{readme rf-info}@anchor{4}@anchor{readme welcome-to-rf-info-s-documentation}@anchor{5}
@chapter rf-info


@image{rf-info-figures//opt/rf_info/docs/_build/doctrees/images/e99e0bae31486bda499fe1e1e213c153dfd12712/rf_info,,,,svg}

@image{rf-info-figures//opt/rf_info/docs/_build/doctrees/images/31c6a4bee8b6bd814862adf5140fb632cf5a77e3/rf_info,,,,svg}

@image{rf-info-figures//opt/rf_info/docs/_build/doctrees/images/72184e53e8f574e967626bb9c297cfbd57f9c423/rf_info,,,,svg}

@image{rf-info-figures//opt/rf_info/docs/_build/doctrees/images/6720fc0c6d285c4acc4930f36ec34bfe7b9f3d4b/badge,,,,svg}

@image{rf-info-figures//opt/rf_info/docs/_build/doctrees/images/f8b1d7dcd180c1cd81bac45dfa74790ba8c8e87d/rf_info,,,,svg}

@image{rf-info-figures//opt/rf_info/docs/_build/doctrees/images/c6cb54b3ce92bb19aa3fe6e81c091369a0f776d9/3b6069fc5fd5044662f697e5d0aaba1a888dac2a,,,,svg}

@image{rf-info-figures//opt/rf_info/docs/_build/doctrees/images/724e6c15d7c16a141b2570a05967d8143b25a78c/f20fa6728a4a6edb43cb1f1dceb1e3e8ede57bc6,,,Documentation Status,svg}

Command line & Python library for obtaining details about a radio frequency


@itemize *

@item 
Free software: MIT license

@item 
Documentation: @indicateurl{https://rf-info.readthedocs.io}.

@item 
Python 3.6, 3.7, 3.8 & pypy3 tested

@item 
Linux & Windows with color terminal support
@end itemize

@menu
* Features:: 
* Install:: 
* Usage:: 
* Todo:: 
* Credits:: 

@end menu

@node Features,Install,,rf-info
@anchor{readme features}@anchor{6}
@section Features


Returns information about a radio frequency (Country Specific)


@itemize -

@item 
“Radio Display” format (Dotted notaton)

@item 
hz, khz, Mhz  and Ghz representations of the frequency

@item 
Frequency Wavelength

@item 
ITU Band Description

@item 
ITU Band Abbreviation

@item 
ITU Band Number

@item 
IEEE Band Name

@item 
NATO Band Name

@item 
Waveguide Band Name

@item 
Fixed Station & Mobile Station Designations

@item 
Broadcast Information

@item 
Primary Band Allocations

@item 
Secondary Band Allocations

@item 
Detailed footnotes for each band allocation

@item 
Amateur Radio Details (Usage, License Class, Max Power) * Not yet complete
@end itemize

Currently supported band allocations for countries:
United States (US), Canada (CA), Brazil (BR), Spain (ES), United Kingdom (GB), Russian Federation (RU), Ukraine (UA), Japan (JP), India (IN), Korea, Republic of (KR), Thailand (TH), Switzerland (CH), Chile (CL), Denmark (DK), Finland (FI), France (FR), Hungary (HU), Indonesia (ID), Iceland (IS), Italy (IT), Mexico (MX), Netherlands (NL), New Zealand (NZ), Norway (NO), Poland (PL), South Africa (ZA), Sweden (SE), Venezuela (VE), Australia (AU), Slovenia (SI), Ireland (IE), Belgium (BE), Austria (AT), Argentina (AR), Israel (IL), Romania (RO), China (CN), Uruguay (UY), Greece (GR), Panama (PA), Peru (PE)

I can easily add support for more countries upon request

Command line supports color, raw parsable, and json output

@node Install,Usage,Features,rf-info
@anchor{readme install}@anchor{7}
@section Install


Python library Requires:

Command Line Requires:

Install:

@node Usage,Todo,Install,rf-info
@anchor{readme usage}@anchor{8}
@section Usage


Command Line:

Frequency format examples:

Also supports “Radio Display” frequency representation (Dotted notation):

Suffix examples
hz, khz, Mhz, Ghz  (Case Insensitive):

Country examples (2 digit abbriviation, 3 digit abbriviation, 3 digit number, or full name)
US, USA, 040, JPN, es, Spain  (Case Insensitive):

Python:

Returns a dictionary:

Or you can get individual items directly:

Also supports adding and subtracting frequencies.  Either a frequency object, int, or string representation of a frequency, returns a new frequency object:

Example command line output:

@node Todo,Credits,Usage,rf-info
@anchor{readme todo}@anchor{9}
@section Todo



@itemize -

@item 
More WIFI band details (channels)

@item 
More Cellular band details (channels)

@item 
More Sattelite band details
@end itemize

@node Credits,,Todo,rf-info
@anchor{readme credits}@anchor{a}
@section Credits


M. Ian Perry (@email{ianperry99@@gmail.com})
AD8DL

@node Installation,Usage<2>,rf-info,Top
@anchor{installation doc}@anchor{b}@anchor{installation installation}@anchor{c}
@chapter Installation


@menu
* Requirements:: 
* Stable release:: 
* From sources:: 

@end menu

@node Requirements,Stable release,,Installation
@anchor{installation requirements}@anchor{d}
@section Requirements


rf-info requires the iso3166 library

@example
$ pip install iso3166
@end example

rf-info command line also requires the colorama library for color terminal output

@example
$ pip install colorama
@end example

@node Stable release,From sources,Requirements,Installation
@anchor{installation stable-release}@anchor{e}
@section Stable release


To install rf-info, run this command in your terminal:

@example
$ pip install rf-info
@end example

This is the preferred method to install rf-info, as it will always install the most recent stable release.

If you don’t have pip@footnote{https://pip.pypa.io/en/stable/} installed, this Python installation guide@footnote{https://docs.python-guide.org/starting/installation/} can guide
you through the process.

@node From sources,,Stable release,Installation
@anchor{installation from-sources}@anchor{f}@anchor{installation python-installation-guide}@anchor{10}
@section From sources


The sources for rf-info can be downloaded from the Github repo@footnote{https://github.com/cosmicc/rf_info}.

You can either clone the public repository:

@example
$ git clone git://github.com/cosmicc/rf_info
@end example

Or download the tarball@footnote{https://github.com/cosmicc/rf_info/tarball/master}:

@example
$ curl -OJL https://github.com/cosmicc/rf_info/tarball/master
@end example

Once you have a copy of the source, you can install it with:

@example
$ python setup.py install
@end example

@node Usage<2>,rf-info<2>,Installation,Top
@anchor{usage doc}@anchor{11}@anchor{usage tarball}@anchor{12}@anchor{usage usage}@anchor{13}
@chapter Usage


@menu
* Python:: 
* Command Line:: 

@end menu

@node Python,Command Line,,Usage<2>
@anchor{usage python}@anchor{14}
@section Python


To use rf-info in a python project:

@example
>>> from rf_info import Frequency
>>> freq = Frequency('112.434.000')
@end example


@table @asis

@item then::

@example
>>> freq.details()
@end example

@item Returns a dictionary of all details::

@example
>>> @{'display': '144.100.000', 'hz': 144100000, 'khz': 144100.0, 'mhz': 144.1, 'ghz': 0.1441, 'wavelength': '2m', 'itu_band': 'Very High Frequency', 'itu_abbr': 'VHF', 'itu_num': 8, 'ieee_band': 'VHF', 'ieee_description': 'Very High Frequency', 'nato_band': 'A', 'waveguide_band': None, 'country_abbr': 'US', 'country_name': 'United States of America', 'amateur': True, 'fixed_station': False, 'mobile_station': False, 'broadcast': False, 'primary_allocation': ['Amateur', 'Amateur-Satellite'], 'secondary_allocation': [], 'allocation_notes': ['[5.216]: Additional allocation: in China, the band 144-146 MHz is also allocated to the aeronautical mobile (OR) service on a secondary basis.']@}
@end example
@end table

You can also get each detail individually:

@example
>>> freq.itu_band
>>> freq.wavelength
>>> freq.Primary_Allocation
@end example

Also supports adding and subtracting frequencies. Start with a frequency object then annd or subtract another frequency object, int, or string representation of a frequency, returns a new frequency object:

@example
>>> new_freq_object = Frequency('001.123.000') + Frequency('7', 'khz')  # Adds 7 khz to 1.123 mhz
>>> new_freq_object = Frequency('1', 'mhz') + 15000  # Adds 15 khz to 1 mhz
>>> new_freq_object = Frequency('123,000') - '000.007.000'  # Subtracts 7 khz from 123 khz
@end example

@node Command Line,,Python,Usage<2>
@anchor{usage command-line}@anchor{15}
@section Command Line


To use the rf-info command line tool:

@example
$ rf-info <frequency> [<units>] [<country>]
@end example

Frequency format examples:

@example
$ rf-info 89910000
$ rf-info 23,450,000
$ rf-info 12,634.534
$ rf-info 12_000_000
$ rf-info 344_500.100
@end example

Also supports "Radio Display" frequency representation (Dotted notation):

@example
$ rf-info 124.125.000
$ rf-info 1.500.125.000
$ rf-info 000.012.500
@end example

Suffix examples: hz, khz, Mhz, Ghz (Case Insensitive):

@example
$ rf-info 123.100 mhz
$ rf-info 4.5 ghz
@end example

Country examples (2 digit abbriviation, 3 digit abbriviation, 3 digit number, or full name): US, USA, 040, JPN, es, Spain (Case Insensitive):

@example
$ rf-info 144.400.000 hz US
$ rf-info 88 mhz JPN
@end example

Example command line output:

@example
$ rf-info 144.100.000 hz US
Display: 144.100.000
Hz: 144100000
Khz: 144100.0
Mhz: 144.1
Ghz: 0.1441
Wavelength: 2m
Itu_Band: Very High Frequency
Itu_Abbr: VHF
Itu_Num: 8
Ieee_Band: VHF
Ieee_Description: Very High Frequency
Nato_Band: A
Country_Abbr: US
Country_Name: United States of America
Fixed_Station: False
Mobile_Station: False
Broadcasting: False
Amateur: True
Amateur_Details:
    General CW and weak signals
    License Class
Max Power
Primary_Allocation:
    Amateur
    Amateur-Satellite
Allocation_Notes:
    [5.216]: Additional allocation: in China, the band 144-146 MHz is also allocated to the aeronautical mobile (OR) service on a
@end example

You also can print the info in raw or json formatted output:

@example
$ rf-info 144.000 hz --raw
$ rf-info 144.000 hz --json
@end example

@node rf-info<2>,Contributing,Usage<2>,Top
@anchor{modules doc}@anchor{16}@anchor{modules rf-info}@anchor{17}
@chapter rf-info


@menu
* rf-info package:: 

@end menu

@node rf-info package,,,rf-info<2>
@anchor{rf_info doc}@anchor{18}@anchor{rf_info rf-info-package}@anchor{19}
@section rf-info package


@menu
* Submodules:: 
* rf_info.rf_info module: rf_info rf_info module. 
* Module contents:: 

@end menu

@node Submodules,rf_info rf_info module,,rf-info package
@anchor{rf_info submodules}@anchor{1a}
@subsection Submodules


@node rf_info rf_info module,Module contents,Submodules,rf-info package
@anchor{rf_info module-rf_info rf_info}@anchor{1}@anchor{rf_info rf-info-rf-info-module}@anchor{1b}
@subsection rf_info.rf_info module


@geindex rf_info.rf_info (module)

@geindex Frequency (class in rf_info.rf_info)
@anchor{rf_info rf_info rf_info Frequency}@anchor{1c}
@deffn {Class} rf_info.rf_info.Frequency (freq, unit='hz', country='us')


Bases: @code{object}

@geindex details() (rf_info.rf_info.Frequency method)
@anchor{rf_info rf_info rf_info Frequency details}@anchor{1d}
@deffn {Method} details ()

@end deffn

@geindex info() (rf_info.rf_info.Frequency method)
@anchor{rf_info rf_info rf_info Frequency info}@anchor{1e}
@deffn {Method} info ()

@end deffn
@end deffn

@geindex parse_freq() (in module rf_info.rf_info)
@anchor{rf_info rf_info rf_info parse_freq}@anchor{1f}
@deffn {Function} rf_info.rf_info.parse_freq (freq, unit)

@end deffn

@geindex remove_all_butfirst() (in module rf_info.rf_info)
@anchor{rf_info rf_info rf_info remove_all_butfirst}@anchor{20}
@deffn {Function} rf_info.rf_info.remove_all_butfirst (s, substr)

@end deffn

@node Module contents,,rf_info rf_info module,rf-info package
@anchor{rf_info module-contents}@anchor{21}@anchor{rf_info module-rf_info}@anchor{0}
@subsection Module contents


@geindex rf_info (module)

@node Contributing,Credits<2>,rf-info<2>,Top
@anchor{contributing doc}@anchor{22}@anchor{contributing contributing}@anchor{23}
@chapter Contributing


Contributions are welcome, and they are greatly appreciated! Every little bit
helps, and credit will always be given.

You can contribute in many ways:

@menu
* Types of Contributions:: 
* Get Started!:: 
* Pull Request Guidelines:: 
* Tips:: 
* Deploying:: 

@end menu

@node Types of Contributions,Get Started!,,Contributing
@anchor{contributing types-of-contributions}@anchor{24}
@section Types of Contributions


@menu
* Report Bugs:: 
* Fix Bugs:: 
* Implement Features:: 
* Write Documentation:: 
* Submit Feedback:: 

@end menu

@node Report Bugs,Fix Bugs,,Types of Contributions
@anchor{contributing report-bugs}@anchor{25}
@subsection Report Bugs


Report bugs at @indicateurl{https://github.com/cosmicc/rf_info/issues}.

If you are reporting a bug, please include:


@itemize *

@item 
Your operating system name and version.

@item 
Any details about your local setup that might be helpful in troubleshooting.

@item 
Detailed steps to reproduce the bug.
@end itemize

@node Fix Bugs,Implement Features,Report Bugs,Types of Contributions
@anchor{contributing fix-bugs}@anchor{26}
@subsection Fix Bugs


Look through the GitHub issues for bugs. Anything tagged with "bug" and "help
wanted" is open to whoever wants to implement it.

@node Implement Features,Write Documentation,Fix Bugs,Types of Contributions
@anchor{contributing implement-features}@anchor{27}
@subsection Implement Features


Look through the GitHub issues for features. Anything tagged with "enhancement"
and "help wanted" is open to whoever wants to implement it.

@node Write Documentation,Submit Feedback,Implement Features,Types of Contributions
@anchor{contributing write-documentation}@anchor{28}
@subsection Write Documentation


rf-info could always use more documentation, whether as part of the
official rf-info docs, in docstrings, or even on the web in blog posts,
articles, and such.

@node Submit Feedback,,Write Documentation,Types of Contributions
@anchor{contributing submit-feedback}@anchor{29}
@subsection Submit Feedback


The best way to send feedback is to file an issue at @indicateurl{https://github.com/cosmicc/rf_info/issues}.

If you are proposing a feature:


@itemize *

@item 
Explain in detail how it would work.

@item 
Keep the scope as narrow as possible, to make it easier to implement.

@item 
Remember that this is a volunteer-driven project, and that contributions
are welcome :)
@end itemize

@node Get Started!,Pull Request Guidelines,Types of Contributions,Contributing
@anchor{contributing get-started}@anchor{2a}
@section Get Started!


Ready to contribute? Here's how to set up @cite{rf_info} for local development.


@enumerate 

@item 
Fork the @cite{rf_info} repo on GitHub.

@item 
Clone your fork locally:

@example
$ git clone git@@github.com:your_name_here/rf_info.git
@end example

@item 
Install your local copy into a virtualenv. Assuming you have virtualenvwrapper installed, this is how you set up your fork for local development:

@example
$ mkvirtualenv rf_info
$ cd rf_info/
$ python setup.py develop
@end example

@item 
Create a branch for local development:

@example
$ git checkout -b name-of-your-bugfix-or-feature
@end example

Now you can make your changes locally.

@item 
When you're done making changes, check that your changes pass flake8 and the
tests, including testing other Python versions with tox:

@example
$ flake8 rf_info tests
$ python setup.py test or pytest
$ tox
@end example

To get flake8 and tox, just pip install them into your virtualenv.

@item 
Commit your changes and push your branch to GitHub:

@example
$ git add .
$ git commit -m "Your detailed description of your changes."
$ git push origin name-of-your-bugfix-or-feature
@end example

@item 
Submit a pull request through the GitHub website.
@end enumerate

@node Pull Request Guidelines,Tips,Get Started!,Contributing
@anchor{contributing pull-request-guidelines}@anchor{2b}
@section Pull Request Guidelines


Before you submit a pull request, check that it meets these guidelines:


@enumerate 

@item 
The pull request should include tests.

@item 
If the pull request adds functionality, the docs should be updated. Put
your new functionality into a function with a docstring, and add the
feature to the list in README.rst.

@item 
The pull request should work for Python 3.5, 3.6, 3.7 and 3.8, and for PyPy. Check
@indicateurl{https://travis-ci.org/cosmicc/rf_info/pull_requests}
and make sure that the tests pass for all supported Python versions.
@end enumerate

@node Tips,Deploying,Pull Request Guidelines,Contributing
@anchor{contributing tips}@anchor{2c}
@section Tips


To run a subset of tests:

@example
$ pytest tests.test_rf_info
@end example

@node Deploying,,Tips,Contributing
@anchor{contributing deploying}@anchor{2d}
@section Deploying


A reminder for the maintainers on how to deploy.
Make sure all your changes are committed (including an entry in HISTORY.rst).
Then run:

@example
$ bump2version patch # possible: major / minor / patch
$ git push
$ git push --tags
@end example

Travis will then deploy to PyPI if tests pass.

@node Credits<2>,History,Contributing,Top
@anchor{authors doc}@anchor{2e}@anchor{authors credits}@anchor{2f}
@chapter Credits


@menu
* Development Lead:: 
* Contributors:: 

@end menu

@node Development Lead,Contributors,,Credits<2>
@anchor{authors development-lead}@anchor{30}
@section Development Lead



@itemize *

@item 
Ian Perry <@email{ianperry99@@gmail.com}>
@end itemize

@node Contributors,,Development Lead,Credits<2>
@anchor{authors contributors}@anchor{31}
@section Contributors


None yet. Why not be the first?

@node History,Indices and tables,Credits<2>,Top
@anchor{history doc}@anchor{32}@anchor{history history}@anchor{33}
@chapter History


@menu
* 0.1.0 (2020-01-12): 0 1 0 2020-01-12. 

@end menu

@node 0 1 0 2020-01-12,,,History
@anchor{history id1}@anchor{34}
@section 0.1.0 (2020-01-12)



@itemize *

@item 
First release on PyPI.
@end itemize

@node Indices and tables,Python Module Index,History,Top
@anchor{index indices-and-tables}@anchor{35}
@unnumbered Indices and tables



@itemize *

@item 
genindex

@item 
modindex

@item 
search
@end itemize

@node Python Module Index,Index,Indices and tables,Top
@unnumbered Python Module Index


@menu
* rf_info: 0. 
* rf_info.rf_info: 1. 
@end menu


@node Index,,Python Module Index,Top
@unnumbered Index


@printindex ge


@c %**end of body
@bye
