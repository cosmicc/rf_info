.\" Man page generated from reStructuredText.
.
.TH "RF-INFO" "1" "Jan 18, 2020" "0.6.3" "rf-info"
.SH NAME
rf-info \- rf-info Documentation
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.SH RF-INFO
\fI\%\fP\fI\%\fP\fI\%Python 3\fP\fI\%\fP\fI\%\fP\fI\%\fP\fI\%Documentation Status\fP\fI\%Updates\fP
.sp
Command line & Python library for obtaining details about a radio frequency
.INDENT 0.0
.IP \(bu 2
Free software: MIT license
.IP \(bu 2
Documentation: \fI\%https://rf\-info.readthedocs.io\fP\&.
.IP \(bu 2
Python 3.6, 3.7, 3.8 & pypy3 tested
.IP \(bu 2
Linux & Windows with color terminal support
.UNINDENT
.SS Features
.sp
Returns information about a radio frequency (Country Specific)
.INDENT 0.0
.IP \(bu 2
"Radio Display" format (Dotted notaton)
.IP \(bu 2
hz, khz, Mhz  and Ghz representations of the frequency
.IP \(bu 2
Frequency Wavelength
.IP \(bu 2
ITU Band Description
.IP \(bu 2
ITU Band Abbreviation
.IP \(bu 2
ITU Band Number
.IP \(bu 2
IEEE Band Name
.IP \(bu 2
NATO Band Name
.IP \(bu 2
Waveguide Band Name
.IP \(bu 2
Fixed Station & Mobile Station Designations
.IP \(bu 2
Broadcast Information
.IP \(bu 2
Primary Band Allocations
.IP \(bu 2
Secondary Band Allocations
.IP \(bu 2
Detailed footnotes for each band allocation
.IP \(bu 2
Amateur Radio Details (Usage, License Class, Max Power) * Not yet complete
.UNINDENT
.sp
Currently supported band allocations for countries:
United States (US), Canada (CA), Brazil (BR), Spain (ES), United Kingdom (GB), Russian Federation (RU), Ukraine (UA), Japan (JP), India (IN), Korea, Republic of (KR), Thailand (TH), Switzerland (CH), Chile (CL), Denmark (DK), Finland (FI), France (FR), Hungary (HU), Indonesia (ID), Iceland (IS), Italy (IT), Mexico (MX), Netherlands (NL), New Zealand (NZ), Norway (NO), Poland (PL), South Africa (ZA), Sweden (SE), Venezuela (VE), Australia (AU), Slovenia (SI), Ireland (IE), Belgium (BE), Austria (AT), Argentina (AR), Israel (IL), Romania (RO), China (CN), Uruguay (UY), Greece (GR), Panama (PA), Peru (PE)
.sp
I can easily add support for more countries upon request
.sp
Command line supports color, raw parsable, and json output
.SS Install
.sp
Python library Requires:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ pip3 install iso3166
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Command Line Requires:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ pip3 install iso3166 colorama
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Install:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ pip3 install rf\-info
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Usage
.INDENT 0.0
.INDENT 3.5
Command Line:
.UNINDENT
.UNINDENT
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ rf\-info <frequency> [<units>] [<country>]
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Frequency format examples:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ rf\-info 89910000
$ rf\-info 23,450,000
$ rf\-info 12,634.534
$ rf\-info 12_000_000
$ rf\-info 344_500.100
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Also supports "Radio Display" frequency representation (Dotted notation):
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ rf\-info 124.125.000
$ rf\-info 1.500.125.000
$ rf\-info 000.012.500
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Suffix examples:
hz, khz, Mhz, Ghz  (Case Insensitive)
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ rf\-info 123.100 mhz
$ rf\-info 4.5 ghz
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Country examples (2 digit abbriviation, 3 digit abbriviation, 3 digit number, or full name):
US, USA, 040, JPN, es, Spain  (Case Insensitive)
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ rf\-info 144.400.000 hz US
$ rf\-info 88 mhz JPN
.ft P
.fi
.UNINDENT
.UNINDENT
.INDENT 0.0
.INDENT 3.5
Python:
.UNINDENT
.UNINDENT
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
>>> from rf_info import Frequency
>>> freq = Frequency(\(aq112.434.000\(aq)
>>> freq.details()
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
returns a dictionary:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
>>> {\(aqdisplay\(aq: \(aq144.100.000\(aq, \(aqhz\(aq: 144100000, \(aqkhz\(aq: 144100.0, \(aqmhz\(aq: 144.1, \(aqghz\(aq: 0.1441, \(aqwavelength\(aq: \(aq2m\(aq, \(aqitu_band\(aq: \(aqVery High Frequency\(aq, \(aqitu_abbr\(aq: \(aqVHF\(aq, \(aqitu_num\(aq: 8, \(aqieee_band\(aq: \(aqVHF\(aq, \(aqieee_description\(aq: \(aqVery High Frequency\(aq, \(aqnato_band\(aq: \(aqA\(aq, \(aqwaveguide_band\(aq: None, \(aqcountry_abbr\(aq: \(aqUS\(aq, \(aqcountry_name\(aq: \(aqUnited States of America\(aq, \(aqamateur\(aq: True, \(aqfixed_station\(aq: False, \(aqmobile_station\(aq: False, \(aqbroadcast\(aq: False, \(aqprimary_allocation\(aq: [\(aqAmateur\(aq, \(aqAmateur\-Satellite\(aq], \(aqsecondary_allocation\(aq: [], \(aqallocation_notes\(aq: [\(aq[5.216]: Additional allocation: in China, the band 144\-146 MHz is also allocated to the aeronautical mobile (OR) service on a secondary basis.\(aq]}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
or you can get individual items directly:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
>>> freq.itu_band
>>> freq.wavelength
>>> freq.primary_allocation
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Also supports adding and subtracting frequencies.  Either a frequency object, int, or string representation of a frequency, returns a new frequency object:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
>>> new_freq_object = Frequency(\(aq001.123.000\(aq) + Frequency(\(aq7\(aq, \(aqkhz\(aq)  # Adds 7 khz to 1.123 mhz
>>> new_freq_object = Frequency(\(aq1\(aq, \(aqmhz\(aq) + 15000  # Adds 15 khz to 1 mhz
>>> new_freq_object = Frequency(\(aq123,000\(aq) \- \(aq000.007.000\(aq  # Subtracts 7 khz from 123 khz
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Example command line output:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ rf\-info 144.100.000 hz US
.ft P
.fi
.UNINDENT
.UNINDENT
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
Display: 144.100.000
Hz: 144100000
Khz: 144100.0
Mhz: 144.1
Ghz: 0.1441
Wavelength: 2m
Itu_Band: Very High Frequency
Itu_Abbr: VHF
Itu_Num: 8
Ieee_Band: VHF
Ieee_Description: Very High Frequency
Nato_Band: A
Country_Abbr: US
Country_Name: United States of America
Fixed_Station: False
Mobile_Station: False
Broadcasting: False
Amateur: True
Amateur_Details:
 General CW and weak signals
 License Class
 Max Power
Primary_Allocation:
 Amateur
 Amateur\-Satellite
Allocation_Notes:
 [5.216]: Additional allocation: in China, the band 144\-146 MHz is also allocated to the aeronautical mobile (OR) service on a secondary basis.
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Todo
.INDENT 0.0
.IP \(bu 2
More WIFI band details (channels)
.IP \(bu 2
More Cellular band details (channels)
.IP \(bu 2
More Sattelite band details
.UNINDENT
.SS Credits
.sp
M. Ian Perry (\fI\%ianperry99@gmail.com\fP)
AD8DL
.SH INSTALLATION
.SS Requirements
.sp
rf\-info requires the iso3166 library
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ pip install iso3166
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
rf\-info command line also requires the colorama library for color terminal output
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ pip install colorama
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Stable release
.sp
To install rf\-info, run this command in your terminal:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ pip install rf\-info
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
This is the preferred method to install rf\-info, as it will always install the most recent stable release.
.sp
If you don\(aqt have \fI\%pip\fP installed, this \fI\%Python installation guide\fP can guide
you through the process.
.SS From sources
.sp
The sources for rf\-info can be downloaded from the \fI\%Github repo\fP\&.
.sp
You can either clone the public repository:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ git clone git://github.com/cosmicc/rf_info
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Or download the \fI\%tarball\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ curl \-OJL https://github.com/cosmicc/rf_info/tarball/master
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Once you have a copy of the source, you can install it with:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ python setup.py install
.ft P
.fi
.UNINDENT
.UNINDENT
.SH USAGE
.SS Python
.sp
To use rf\-info in a python project:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
>>> from rf_info import Frequency
>>> freq = Frequency(\(aq112.434.000\(aq)
.ft P
.fi
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B then::
.sp
.nf
.ft C
>>> freq.details()
.ft P
.fi
.TP
.B Returns a dictionary of all details::
.sp
.nf
.ft C
>>> {\(aqdisplay\(aq: \(aq144.100.000\(aq, \(aqhz\(aq: 144100000, \(aqkhz\(aq: 144100.0, \(aqmhz\(aq: 144.1, \(aqghz\(aq: 0.1441, \(aqwavelength\(aq: \(aq2m\(aq, \(aqitu_band\(aq: \(aqVery High Frequency\(aq, \(aqitu_abbr\(aq: \(aqVHF\(aq, \(aqitu_num\(aq: 8, \(aqieee_band\(aq: \(aqVHF\(aq, \(aqieee_description\(aq: \(aqVery High Frequency\(aq, \(aqnato_band\(aq: \(aqA\(aq, \(aqwaveguide_band\(aq: None, \(aqcountry_abbr\(aq: \(aqUS\(aq, \(aqcountry_name\(aq: \(aqUnited States of America\(aq, \(aqamateur\(aq: True, \(aqfixed_station\(aq: False, \(aqmobile_station\(aq: False, \(aqbroadcast\(aq: False, \(aqprimary_allocation\(aq: [\(aqAmateur\(aq, \(aqAmateur\-Satellite\(aq], \(aqsecondary_allocation\(aq: [], \(aqallocation_notes\(aq: [\(aq[5.216]: Additional allocation: in China, the band 144\-146 MHz is also allocated to the aeronautical mobile (OR) service on a secondary basis.\(aq]}
.ft P
.fi
.UNINDENT
.sp
You can also get each detail individually:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
>>> freq.itu_band
>>> freq.wavelength
>>> freq.Primary_Allocation
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Also supports adding and subtracting frequencies. Start with a frequency object then annd or subtract another frequency object, int, or string representation of a frequency, returns a new frequency object:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
>>> new_freq_object = Frequency(\(aq001.123.000\(aq) + Frequency(\(aq7\(aq, \(aqkhz\(aq)  # Adds 7 khz to 1.123 mhz
>>> new_freq_object = Frequency(\(aq1\(aq, \(aqmhz\(aq) + 15000  # Adds 15 khz to 1 mhz
>>> new_freq_object = Frequency(\(aq123,000\(aq) \- \(aq000.007.000\(aq  # Subtracts 7 khz from 123 khz
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Command Line
.sp
To use the rf\-info command line tool:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ rf\-info <frequency> [<units>] [<country>]
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Frequency format examples:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ rf\-info 89910000
$ rf\-info 23,450,000
$ rf\-info 12,634.534
$ rf\-info 12_000_000
$ rf\-info 344_500.100
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Also supports "Radio Display" frequency representation (Dotted notation):
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ rf\-info 124.125.000
$ rf\-info 1.500.125.000
$ rf\-info 000.012.500
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Suffix examples: hz, khz, Mhz, Ghz (Case Insensitive):
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ rf\-info 123.100 mhz
$ rf\-info 4.5 ghz
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Country examples (2 digit abbriviation, 3 digit abbriviation, 3 digit number, or full name): US, USA, 040, JPN, es, Spain (Case Insensitive):
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ rf\-info 144.400.000 hz US
$ rf\-info 88 mhz JPN
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Example command line output:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ rf\-info 144.100.000 hz US
Display: 144.100.000
Hz: 144100000
Khz: 144100.0
Mhz: 144.1
Ghz: 0.1441
Wavelength: 2m
Itu_Band: Very High Frequency
Itu_Abbr: VHF
Itu_Num: 8
Ieee_Band: VHF
Ieee_Description: Very High Frequency
Nato_Band: A
Country_Abbr: US
Country_Name: United States of America
Fixed_Station: False
Mobile_Station: False
Broadcasting: False
Amateur: True
Amateur_Details:
    General CW and weak signals
    License Class
Max Power
Primary_Allocation:
    Amateur
    Amateur\-Satellite
Allocation_Notes:
    [5.216]: Additional allocation: in China, the band 144\-146 MHz is also allocated to the aeronautical mobile (OR) service on a
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
You also can print the info in raw or json formatted output:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ rf\-info 144.000 hz \-\-raw
$ rf\-info 144.000 hz \-\-json
.ft P
.fi
.UNINDENT
.UNINDENT
.SH RF-INFO
.SS rf\-info package
.SS Submodules
.SS rf_info.rf_info module
.INDENT 0.0
.TP
.B class rf_info.rf_info.Frequency(freq, unit=\(aqhz\(aq, country=\(aqus\(aq)
Bases: \fBobject\fP
.INDENT 7.0
.TP
.B details()
.UNINDENT
.INDENT 7.0
.TP
.B info()
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B rf_info.rf_info.parse_freq(freq, unit)
.UNINDENT
.INDENT 0.0
.TP
.B rf_info.rf_info.remove_all_butfirst(s, substr)
.UNINDENT
.SS Module contents
.SH CONTRIBUTING
.sp
Contributions are welcome, and they are greatly appreciated! Every little bit
helps, and credit will always be given.
.sp
You can contribute in many ways:
.SS Types of Contributions
.SS Report Bugs
.sp
Report bugs at \fI\%https://github.com/cosmicc/rf_info/issues\fP\&.
.sp
If you are reporting a bug, please include:
.INDENT 0.0
.IP \(bu 2
Your operating system name and version.
.IP \(bu 2
Any details about your local setup that might be helpful in troubleshooting.
.IP \(bu 2
Detailed steps to reproduce the bug.
.UNINDENT
.SS Fix Bugs
.sp
Look through the GitHub issues for bugs. Anything tagged with "bug" and "help
wanted" is open to whoever wants to implement it.
.SS Implement Features
.sp
Look through the GitHub issues for features. Anything tagged with "enhancement"
and "help wanted" is open to whoever wants to implement it.
.SS Write Documentation
.sp
rf\-info could always use more documentation, whether as part of the
official rf\-info docs, in docstrings, or even on the web in blog posts,
articles, and such.
.SS Submit Feedback
.sp
The best way to send feedback is to file an issue at \fI\%https://github.com/cosmicc/rf_info/issues\fP\&.
.sp
If you are proposing a feature:
.INDENT 0.0
.IP \(bu 2
Explain in detail how it would work.
.IP \(bu 2
Keep the scope as narrow as possible, to make it easier to implement.
.IP \(bu 2
Remember that this is a volunteer\-driven project, and that contributions
are welcome :)
.UNINDENT
.SS Get Started!
.sp
Ready to contribute? Here\(aqs how to set up \fIrf_info\fP for local development.
.INDENT 0.0
.IP 1. 3
Fork the \fIrf_info\fP repo on GitHub.
.IP 2. 3
Clone your fork locally:
.INDENT 3.0
.INDENT 3.5
.sp
.nf
.ft C
$ git clone git@github.com:your_name_here/rf_info.git
.ft P
.fi
.UNINDENT
.UNINDENT
.IP 3. 3
Install your local copy into a virtualenv. Assuming you have virtualenvwrapper installed, this is how you set up your fork for local development:
.INDENT 3.0
.INDENT 3.5
.sp
.nf
.ft C
$ mkvirtualenv rf_info
$ cd rf_info/
$ python setup.py develop
.ft P
.fi
.UNINDENT
.UNINDENT
.IP 4. 3
Create a branch for local development:
.INDENT 3.0
.INDENT 3.5
.sp
.nf
.ft C
$ git checkout \-b name\-of\-your\-bugfix\-or\-feature
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Now you can make your changes locally.
.IP 5. 3
When you\(aqre done making changes, check that your changes pass flake8 and the
tests, including testing other Python versions with tox:
.INDENT 3.0
.INDENT 3.5
.sp
.nf
.ft C
$ flake8 rf_info tests
$ python setup.py test or pytest
$ tox
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
To get flake8 and tox, just pip install them into your virtualenv.
.IP 6. 3
Commit your changes and push your branch to GitHub:
.INDENT 3.0
.INDENT 3.5
.sp
.nf
.ft C
$ git add .
$ git commit \-m "Your detailed description of your changes."
$ git push origin name\-of\-your\-bugfix\-or\-feature
.ft P
.fi
.UNINDENT
.UNINDENT
.IP 7. 3
Submit a pull request through the GitHub website.
.UNINDENT
.SS Pull Request Guidelines
.sp
Before you submit a pull request, check that it meets these guidelines:
.INDENT 0.0
.IP 1. 3
The pull request should include tests.
.IP 2. 3
If the pull request adds functionality, the docs should be updated. Put
your new functionality into a function with a docstring, and add the
feature to the list in README.rst.
.IP 3. 3
The pull request should work for Python 3.5, 3.6, 3.7 and 3.8, and for PyPy. Check
\fI\%https://travis\-ci.org/cosmicc/rf_info/pull_requests\fP
and make sure that the tests pass for all supported Python versions.
.UNINDENT
.SS Tips
.sp
To run a subset of tests:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ pytest tests.test_rf_info
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Deploying
.sp
A reminder for the maintainers on how to deploy.
Make sure all your changes are committed (including an entry in HISTORY.rst).
Then run:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ bump2version patch # possible: major / minor / patch
$ git push
$ git push \-\-tags
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Travis will then deploy to PyPI if tests pass.
.SH CREDITS
.SS Development Lead
.INDENT 0.0
.IP \(bu 2
Ian Perry <\fI\%ianperry99@gmail.com\fP>
.UNINDENT
.SS Contributors
.sp
None yet. Why not be the first?
.SH HISTORY
.SS 0.1.0 (2020\-01\-12)
.INDENT 0.0
.IP \(bu 2
First release on PyPI.
.UNINDENT
.INDENT 0.0
.IP \(bu 2
genindex
.IP \(bu 2
modindex
.IP \(bu 2
search
.UNINDENT
.SH AUTHOR
Ian Perry
.SH COPYRIGHT
2020, Ian Perry
.\" Generated by docutils manpage writer.
.
